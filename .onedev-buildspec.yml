version: 38
jobs:
- name: github-mirror
  steps:
  - !CheckoutStep
    name: checkout
    cloneCredential: !DefaultCredential {}
    withLfs: true
    withSubmodules: true
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !PushRepository
    name: push-to-github
    remoteUrl: https://github.com/MorrisLAN/morrislan
    passwordSecret: github-pat
    force: false
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  triggers:
  - !BranchUpdateTrigger
    branches: prod
  retryCondition: never
  maxRetries: 3
  retryDelay: 30
  timeout: 14400
- name: terraform-plan
  steps:
  - !CheckoutStep
    name: checkout
    cloneCredential: !DefaultCredential {}
    withLfs: true
    withSubmodules: true
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !CommandStep
    name: terraform-plan
    runInContainer: true
    image: hashicorp/terraform:1.10
    interpreter: !DefaultInterpreter
      commands: |
        export TF_INPUT="false"
        export TF_IN_AUTOMATION="true"
        export TF_TOKEN_app_terraform_io="@secret:tf-token@"
        export TF_VAR_cloudflare_token="@secret:cloudflare-token@"
        export TF_VAR_cloudflare_account_id="@secret:cloudflare-account-id@"
        export TF_VAR_cloudflare_zone_id="@secret:cloudflare-zone-id@"

        cd terraform
        terraform init &&
        terraform plan
    useTTY: false
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  triggers:
  - !BranchUpdateTrigger
    paths: terraform/*
  - !BranchUpdateTrigger
    branches: prod
  - !PullRequestUpdateTrigger
    branches: prod
  retryCondition: never
  maxRetries: 3
  retryDelay: 30
  timeout: 14400
- name: terraform-apply
  steps:
  - !CheckoutStep
    name: checkout
    cloneCredential: !DefaultCredential {}
    withLfs: true
    withSubmodules: true
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !CommandStep
    name: terraform-apply
    runInContainer: true
    image: hashicorp/terraform:1.10
    interpreter: !DefaultInterpreter
      commands: |
        export TF_INPUT="false"
        export TF_IN_AUTOMATION="true"
        export TF_TOKEN_app_terraform_io="@secret:tf-token@"
        export TF_VAR_cloudflare_token="@secret:cloudflare-token@"
        export TF_VAR_cloudflare_account_id="@secret:cloudflare-account-id@"
        export TF_VAR_cloudflare_zone_id="@secret:cloudflare-zone-id@"

        cd terraform
        terraform init &&
        terraform apply -auto-approve
    useTTY: true
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  triggers:
  - !BranchUpdateTrigger
    branches: prod
  jobDependencies:
  - jobName: terraform-plan
    requireSuccessful: true
    artifacts: '**'
  retryCondition: never
  maxRetries: 3
  retryDelay: 30
  timeout: 14400
- name: build-homepage
  steps:
  - !CheckoutStep
    name: checkout
    cloneCredential: !DefaultCredential {}
    withLfs: true
    withSubmodules: true
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !BuildImageStep
    name: docker-build
    buildPath: apps/homepage
    output: !RegistryOutput
      tags: '@server_host@/morrislan/homepage:latest'
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  triggers:
  - !BranchUpdateTrigger
    branches: prod
  retryCondition: never
  maxRetries: 3
  retryDelay: 30
  timeout: 14400
- name: sync-omni
  steps:
  - !CheckoutStep
    name: checkout
    cloneCredential: !DefaultCredential {}
    withLfs: true
    withSubmodules: true
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !CommandStep
    name: get-omnictl
    runInContainer: true
    image: alpine
    interpreter: !DefaultInterpreter
      commands: |
        wget https://github.com/siderolabs/omni/releases/download/v0.45.1/omnictl-linux-amd64 -O omnictl && chmod +x omnictl
    useTTY: true
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !CommandStep
    name: omnictl-sync-clusters
    runInContainer: true
    image: alpine
    interpreter: !DefaultInterpreter
      commands: |
        export OMNI_ENDPOINT=@secret:omni-host@
        export OMNI_SERVICE_ACCOUNT_KEY=@secret:omni-token@
        ls -al
        find omni/ -type f -name '*-cluster.yaml' | while read -r cluster; do
          echo ./omnictl cluster template sync -f "$cluster"
        done
    useTTY: true
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  retryCondition: never
  maxRetries: 3
  retryDelay: 30
  timeout: 14400
