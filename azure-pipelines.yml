trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

variables:
  # Docker image settings
  imageRepository: 'homepage'
  containerRegistry: 'homescale-aqdabgdefxa8ged6.azurecr.io'
  dockerRegistryServiceConnection: 'f3e79c52-827a-4d96-b97c-365fc6d744e7'
  dockerfilePath: '$(Build.SourcesDirectory)/apps/homepage/Dockerfile'
  tag: '$(Build.SourceVersion)'
  # VM image for all jobs
  vmImageName: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: "Build and Push Docker Images"
    jobs:
      - job: BuildHomepage
        displayName: "Build - homepage"
        pool:
          vmImage: $(vmImageName)
        steps:
          - checkout: self

          - task: Docker@2
            displayName: "Build & Push $(imageRepository):$(tag)"
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

          - task: Docker@2
            displayName: "Build & Push latest tag"
            condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                latest

  - stage: Deploy
    displayName: "Deploy - Terraform"
    dependsOn: Build
    jobs:
      - job: Terraform
        displayName: "Terraform Plan & Apply"
        pool:
          vmImage: $(vmImageName)
        variables:
          TF_VAR_op_service_account_token: $(OP_SERVICE_ACCOUNT_TOKEN)
          TF_TOKEN_app_terraform_io: $(TF_TOKEN_app_terraform_io)
        steps:
          - checkout: self
            path: deploy/terraform

          - task: TerraformCLI@0
            displayName: "Terraform Format Check"
            inputs:
              workingDirectory: deploy/terraform
              command: fmt
              check: true

          - task: TerraformCLI@0
            displayName: "Terraform Init"
            inputs:
              workingDirectory: deploy/terraform
              command: init

          - task: TerraformCLI@0
            displayName: "Terraform Validate"
            inputs:
              workingDirectory: deploy/terraform
              command: validate

          - task: TerraformCLI@0
            displayName: "Terraform Plan"
            inputs:
              workingDirectory: deploy/terraform
              command: plan
              args: "-out=tfplan"

          - task: TerraformCLI@0
            displayName: "Terraform Apply"
            condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
            inputs:
              workingDirectory: deploy/terraform
              command: apply
              args: "-auto-approve tfplan"
