name: Require Slack Approval

on:
  push:
    branches:
      - prod

jobs:
  wait-for-approval:
    runs-on: ubuntu-latest
    steps:
      - name: Install JQ
        uses: dcarbone/install-jq-action@v3.0.1

      - name: Import Secrets
        uses: hashicorp/vault-action@v3
        with:
          url: https://vault.morrislan.net
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secrets/data/gitea slack-bot-token | SLACK_BOT_TOKEN ;

      - name: Send Slack Approval Request
        id: slack_notify
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: "C07SE7RT7MG"
          payload: |
            {
              "text": "Approval required for deployment.\nReact with âœ… to approve.",
              "attachments": [
                {
                  "text": "Deployment request for `${{ github.ref }}` by `${{ github.actor }}`",
                  "color": "#FFA500"
                }
              ]
            }

      - name: Wait for Slack Reaction
        id: wait_for_reaction
        run: |
          CHANNEL_ID="C07SE7RT7MG"  # Replace with your Slack channel ID
          MESSAGE_RESPONSE="${{ steps.slack_notify.outputs.response }}"

          # Extract the timestamp from the response JSON
          MESSAGE_TS=$(echo "$MESSAGE_RESPONSE" | jq -r '.ts')

          # Log the timestamp for debugging
          echo "Message timestamp: $MESSAGE_TS"

          if [ "$MESSAGE_TS" == "null" ]; then
            echo "Error: No valid timestamp received."
            exit 1
          fi

          echo "Waiting for approval reaction on message timestamp $MESSAGE_TS..."

          # Retry loop for reactions
          while true; do
            # Fetch reactions from Slack API
            REACTIONS=$(curl -s -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
              -H "Content-Type: application/json" \
              "https://slack.com/api/reactions.get?channel=$CHANNEL_ID&timestamp=$MESSAGE_TS")

            # Debugging: Log the raw reactions response for inspection
            echo "Reactions API response: $REACTIONS"
            
            # Check if the white_check_mark reaction is present
            if echo "$REACTIONS" | jq -e '.message.reactions[] | select(.name=="white_check_mark")' > /dev/null 2>&1; then
              echo "Approval received!"
              exit 0
            fi

            # Handle Slack API rate limiting (if applicable)
            ERROR_CODE=$(echo "$REACTIONS" | jq -r '.error')
            if [ "$ERROR_CODE" == "rate_limited" ]; then
              RETRY_AFTER=$(echo "$REACTIONS" | jq -r '.retry_after')
              echo "Rate limited. Sleeping for $RETRY_AFTER seconds..."
              sleep $RETRY_AFTER
              continue
            fi

            echo "No approval yet. Sleeping for 30s..."
            sleep 30
          done
