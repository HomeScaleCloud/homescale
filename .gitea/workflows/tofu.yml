name: "OpenTofu"

permissions:
  contents: read

on:
  push:
    branches:
      - prod
  pull_request:
    branches:
      - prod

env:
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"

jobs:
  plan:
    name: "Plan"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infra/tofu
    env:
      TF_VAR_cloudflare_zone_id: "${{ secrets.CLOUDFLARE_ZONE_ID }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Import Secrets
        uses: hashicorp/vault-action@v3
        with:
          url: https://vault.morrislan.net
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secrets/data/cloudflare token | TF_VAR_cloudflare_token ;
            secrets/data/cloudflare account-id | TF_VAR_cloudflare_account_id ;
            secrets/data/do token | TF_VAR_do_token ;
            secrets/data/do spaces-access-key-id | AWS_ACCESS_KEY_ID ;
            secrets/data/do spaces-secret-access-key | AWS_SECRET_ACCESS_KEY ;

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1

      - name: Format Check
        id: fmt-check
        run: tofu fmt -check

      - name: Initialize
        id: init
        run: tofu init

      - name: Validate
        id: validate
        run: tofu validate

      - name: Plan
        id: plan
        run: tofu plan -out=tfplan

  apply:
    name: "Apply"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: plan
    defaults:
      run:
        shell: bash
        working-directory: ./infra/tofu
    env:
      TF_VAR_cloudflare_zone_id: "${{ secrets.CLOUDFLARE_ZONE_ID }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Import Secrets
        uses: hashicorp/vault-action@v3
        with:
          url: https://vault.morrislan.net
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secrets/data/cloudflare token | TF_VAR_cloudflare_token ;
            secrets/data/cloudflare account-id | TF_VAR_cloudflare_account_id ;
            secrets/data/do token | TF_VAR_do_token ;
            secrets/data/do spaces-access-key-id | AWS_ACCESS_KEY_ID ;
            secrets/data/do spaces-secret-access-key | AWS_SECRET_ACCESS_KEY ;
            secrets/data/gitea slack-bot-token | SLACK_BOT_TOKEN ;


      - name: Request Approval
        id: slack_notify
        uses: slackapi/slack-github-action@v2
        with:
          channel-id: "C07SE7RT7MG"
          payload: |
            {
              "text": "Approval required for deployment.\nReact with âœ… to approve.",
              "attachments": [
                {
                  "text": "Deployment request for <${{ github.event.pull_request.html_url }}|PR> by `${{ github.actor }}`",
                  "color": "#FFA500",
                  "fields": [
                    {
                      "title": "Actions Run",
                      "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Actions run>",
                      "short": false
                    },
                    {
                      "title": "Commit",
                      "value": "<${{ github.event.head_commit.url }}|View Commit>",
                      "short": false
                    },
                    {
                      "title": "Commit Message",
                      "value": "${{ github.event.head_commit.message }}",
                      "short": false
                    }
                  ]
                }
              ]
            }

      - name: Wait for Approval
        id: wait_for_reaction
        run: |
          CHANNEL_ID="C07SE7RT7MG"
          MESSAGE_TS="${{ steps.slack_notify.outputs.ts }}"

          while true; do
            REACTIONS=$(curl -s -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
              -H "Content-Type: application/json" \
              "https://slack.com/api/reactions.get?channel=$CHANNEL_ID&timestamp=$MESSAGE_TS")
            
            if echo "$REACTIONS" | jq -e '.message.reactions[] | select(.name=="white_check_mark")' > /dev/null 2>&1; then
              echo "Approval received."
              exit 0
            fi

            echo "No approval yet. Sleeping for 30s..."
            sleep 30
          done


      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1

      - name: Initialize
        id: init
        run: tofu init

      - name: Apply
        run: tofu apply -auto-approve
