name: "CI"
permissions:
  contents: read
  packages: write
  id-token: write
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build-homepage:
    name: "Build - homepage"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./apps/homepage
          push: true
          tags: ghcr.io/homescalecloud/homepage:${{ github.sha }}
      - name: Build latest
        id: build-latest
        uses: docker/build-push-action@v6
        if: github.ref == 'refs/heads/main'
        with:
          context: ./apps/homepage
          push: true
          tags: ghcr.io/homescalecloud/homepage:latest
  deploy-tailscale:
    name: "Deploy - Tailscale"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Import Secrets
        uses: 1password/load-secrets-action@v2
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          TS_TAILNET: op://ci-cd/tailscale/tailnet #pragma: allowlist secret
          TS_ID: op://ci-cd/tailscale/github-actions-id
          TS_SECRET: op://ci-cd/tailscale/github-actions-secret #pragma: allowlist secret
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.1
          cache: false
      - name: Test
        id: test
        uses: tailscale/gitops-acl-action@v1
        with:
          oauth-client-id: ${{ env.TS_ID }}
          oauth-secret: ${{ env.TS_SECRET }}
          tailnet: ${{ env.TS_TAILNET }}
          policy-file: ./deploy/tailscale/policy.hujson
          action: test
      - name: Apply
        if: github.ref == 'refs/heads/main'
        id: apply
        uses: tailscale/gitops-acl-action@v1
        with:
          oauth-client-id: ${{ env.TS_ID }}
          oauth-secret: ${{ env.TS_SECRET }}
          tailnet: ${{ env.TS_TAILNET }}
          policy-file: ./deploy/tailscale/policy.hujson
          action: apply
  deploy-tofu:
    name: "Deploy - OpenTofu"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./deploy/tofu
    env:
      TF_IN_AUTOMATION: "true"
      TF_INPUT: "false"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
      - name: Format Check
        id: fmt-check
        run: tofu fmt -check
      - name: Import Secrets
        uses: 1password/load-secrets-action@v2
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          AWS_ACCESS_KEY_ID: op://ci-cd/digitalocean/spaces-access-key-id
          AWS_SECRET_ACCESS_KEY: op://ci-cd/digitalocean/spaces-secret-access-key #pragma: allowlist secret
          TF_VAR_cloudflare_token: op://ci-cd/cloudflare/credential
          TF_VAR_cloudflare_account_id: op://ci-cd/cloudflare/account-id
          TF_VAR_cloudflare_zone_id: op://ci-cd/cloudflare/zone-id
          TF_VAR_digitalocean_token: op://ci-cd/digitalocean/credential
          TF_VAR_digitalocean_spaces_id: op://ci-cd/digitalocean/spaces-access-key-id
          TF_VAR_digitalocean_spaces_key: op://ci-cd/digitalocean/spaces-secret-access-key
          TF_VAR_vultr_token: op://ci-cd/vultr/credential
      - name: Initialize
        id: init
        run: tofu init
      - name: Validate
        id: validate
        run: tofu validate
      - name: Plan
        id: plan
        run: tofu plan -out=tfplan
      - name: Apply
        run: tofu apply -auto-approve tfplan
        if: github.ref == 'refs/heads/main'
  deply-omni:
    name: "Deploy - Omni"
    runs-on: ubuntu-latest
    needs: deploy-tofu
    defaults:
      run:
        shell: bash
        working-directory: ./deploy/omni
    env:
      OMNI_ENDPOINT: "https://omni.homescale.cloud"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get omnictl
        run: |
          wget https://github.com/siderolabs/omni/releases/download/v0.47.0/omnictl-linux-amd64 -O omnictl &&
          chmod +x omnictl
      - name: Validate clusters
        run: |
          find . -type f -name '*-cluster.yaml' | while read -r cluster; do
            ./omnictl cluster template validate -f "$cluster"
          done
      - name: Import Secrets
        if: github.ref == 'refs/heads/main'
        uses: 1password/load-secrets-action@v2
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          OMNI_SERVICE_ACCOUNT_KEY: op://ci-cd/omni/credential #pragma: allowlist secret
          TS_ID: op://ci-cd/tailscale/github-actions-id
          TS_SECRET: op://ci-cd/tailscale/github-actions-secret #pragma: allowlist secret
      - name: Connect to Tailscale
        uses: tailscale/github-action@v3
        if: github.ref == 'refs/heads/main'
        with:
          oauth-client-id: $TS_ID
          oauth-secret: $TS_SECRET
          tags: tag:github-actions
      - name: Sync machineclasses
        if: github.ref == 'refs/heads/main'
        run: |
          find . -type f -name '*-machineclasses.yaml' | while read -r file; do
            ./omnictl apply -f "$file"
          done
      - name: Sync clusters
        if: github.ref == 'refs/heads/main'
        run: |
          find . -type f -name '*-cluster.yaml' | while read -r cluster; do
            ./omnictl cluster template sync -f "$cluster"
          done
