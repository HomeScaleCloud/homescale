kube-prometheus-stack:
  grafana:
    defaultDashboardsEnabled: false
    service:
      type: ClusterIP
    grafana.ini:
      server:
        root_url: "https://metrics.dev.homescale.cloud"
      auth:
        disable_login_form: false
      auth.generic_oauth:
        enabled: true
        name: Entra ID
        allow_sign_up: true
        auto_login: true
        client_id: "null"
        client_secret: "null"  # pragma: allowlist secret
        scopes: openid email profile offline_access User.Read
        auth_url: "null"
        token_url: "null"
        role_attribute_path: '"Admin"'
        role_attribute_strict: false
        allow_assign_grafana_admin: true
      users:
        auto_assign_org: true
        auto_assign_org_role: Admin
        allow_sign_up: true
    persistence:
      enabled: true
      type: pvc
      accessModes:
        - ReadWriteOnce
      size: 5Gi
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
      hosts:
        - metrics.dev.homescale.cloud
      tls:
        - secretName: grafana-tls
          hosts:
            - metrics.dev.homescale.cloud
    assertNoLeakedSecrets: false
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: 'grafana-dashboards'
            orgId: 1
            folder: ''
            type: file
            disableDeletion: true
            editable: true
            options:
              path: /var/lib/grafana/dashboards/grafana-dashboards
    dashboards:
      grafana-dashboards:
        k8s-system-api-server:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-api-server.json
          token: ''
        k8s-addons-prometheus:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-addons-prometheus.json
          token: ''
        k8s-system-coredns:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-coredns.json
          token: ''
        k8s-views-global:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-global.json
          token: ''
        k8s-views-namespaces:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-namespaces.json
          token: ''
        k8s-views-nodes:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-nodes.json
          token: ''
        k8s-views-pods:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-pods.json
          token: ''
        k8s-events-exporter:
          url: https://grafana.com/api/dashboards/17882/revisions/2/download
          token: ''
        ingress-controller:
          url: https://grafana.com/api/dashboards/9614/revisions/1/download
          token: ''
          datasource: Prometheus
        k8s-addons-trivy-operator:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-addons-trivy-operator.json
          token: ''
        node-exporter-full:
          url: https://grafana.com/api/dashboards/1860/revisions/41/download
          token: ''
        argocd-overview:
          url: https://grafana.com/api/dashboards/14584/revisions/1/download
          token: ''
    additionalDataSources:
      - name: Loki
        type: loki
        url: http://{{ .Release.Name }}-loki.metrics.svc:3100
        access: proxy
  prometheus:
    annotations:
      argocd.argoproj.io/skip-health-check: 'true'
    prometheusSpec:
      podMonitorSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      serviceMonitorSelector: {}
      serviceMonitorNamespaceSelector: {}
      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 50Gi

loki:
  loki:
    auth_enabled: false
    schemaConfig:
      configs:
        - from: "2024-04-01"
          store: tsdb
          object_store: s3
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    ingester:
      chunk_encoding: snappy
    tracing:
      enabled: true
    querier:
      max_concurrent: 4
    commonConfig:
      replication_factor: 1
  deploymentMode: SingleBinary
  minio:
    enabled: true

  singleBinary:
    replicas: 1

  backend:
    replicas: 0
  read:
    replicas: 0
  write:
    replicas: 0
  ingester:
    replicas: 0
  querier:
    replicas: 0
  queryFrontend:
    replicas: 0
  queryScheduler:
    replicas: 0
  distributor:
    replicas: 0
  compactor:
    replicas: 0
  indexGateway:
    replicas: 0
  bloomCompactor:
    replicas: 0
  bloomGateway:
    replicas: 0

alloy:
  alloy:
    configMap:
      content: |-
        logging {
          level  = "info"
          format = "logfmt"
        }

        discovery.kubernetes "pods" {
          role = "pod"
        }

        loki.source.kubernetes "pods" {
          targets    = discovery.kubernetes.pods.targets
          forward_to = [loki.write.default.receiver]
        }

        loki.write "default" {
          endpoint {
            url = "http://{{ .Release.Name }}-loki.metrics.svc:3100/loki/api/v1/push"
          }
        }

kubernetes-event-exporter:
  metrics:
    enabled: true
  config:
    logLevel: debug
    logFormat: pretty
    metricsNamePrefix: event_exporter_
    receivers:
      - name: "dump"
        file:
          path: "/dev/stdout"
          layout: {}
      - name: loki
        loki:
          url: "http://{{ .Release.Name }}-loki.metrics.svc:3100/loki/api/v1/push"
          streamLabels:
            source: kubernetes-event-exporter
            container: event-exporter
    route:
      routes:
        - match:
            - receiver: "dump"
            - receiver: "loki"
